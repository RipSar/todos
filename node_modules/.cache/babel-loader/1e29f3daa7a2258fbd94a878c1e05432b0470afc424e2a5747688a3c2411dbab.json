{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  inputValue: '',\n  todos: []\n};\nconst todos = createSlice({\n  name: \"todoActions\",\n  initialState,\n  reducers: {\n    addItem: (state, action) => {\n      state.todos = [...state.todos, action.item];\n    },\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes.\n      // Also, no return statement is required from these functions.\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n});\nconst {\n  reducer\n} = todos;\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = todos.actions;\nexport default reducer;","map":{"version":3,"names":["createSlice","initialState","inputValue","todos","name","reducers","addItem","state","action","item","increment","value","decrement","incrementByAmount","payload","reducer","actions"],"sources":["C:/Users/RipSar/WebstormProjects/todo/src/slices/counterSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState = {\r\n    inputValue: '',\r\n    todos: [],\r\n}\r\n\r\n\r\nconst todos = createSlice({\r\n    name: \"todoActions\",\r\n    initialState,\r\n    reducers: {\r\n        addItem: (state, action) => {\r\n            state.todos = [...state.todos, action.item]\r\n        },\r\n        increment: (state) => {\r\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n            // doesn't actually mutate the state because it uses the Immer library,\r\n            // which detects changes to a \"draft state\" and produces a brand new\r\n            // immutable state based off those changes.\r\n            // Also, no return statement is required from these functions.\r\n            state.value += 1\r\n        },\r\n        decrement: (state) => {\r\n            state.value -= 1\r\n        },\r\n        incrementByAmount: (state, action) => {\r\n            state.value += action.payload\r\n        },\r\n    },\r\n\r\n});\r\n\r\nconst { reducer } = todos;\r\n\r\nexport const { increment, decrement, incrementByAmount } = todos.actions\r\nexport default reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAG9C,MAAMC,YAAY,GAAG;EACjBC,UAAU,EAAE,EAAE;EACdC,KAAK,EAAE;AACX,CAAC;AAGD,MAAMA,KAAK,GAAGH,WAAW,CAAC;EACtBI,IAAI,EAAE,aAAa;EACnBH,YAAY;EACZI,QAAQ,EAAE;IACNC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACxBD,KAAK,CAACJ,KAAK,GAAG,CAAC,GAAGI,KAAK,CAACJ,KAAK,EAAEK,MAAM,CAACC,IAAI,CAAC;IAC/C,CAAC;IACDC,SAAS,EAAGH,KAAK,IAAK;MAClB;MACA;MACA;MACA;MACA;MACAA,KAAK,CAACI,KAAK,IAAI,CAAC;IACpB,CAAC;IACDC,SAAS,EAAGL,KAAK,IAAK;MAClBA,KAAK,CAACI,KAAK,IAAI,CAAC;IACpB,CAAC;IACDE,iBAAiB,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAK;MAClCD,KAAK,CAACI,KAAK,IAAIH,MAAM,CAACM,OAAO;IACjC;EACJ;AAEJ,CAAC,CAAC;AAEF,MAAM;EAAEC;AAAQ,CAAC,GAAGZ,KAAK;AAEzB,OAAO,MAAM;EAAEO,SAAS;EAAEE,SAAS;EAAEC;AAAkB,CAAC,GAAGV,KAAK,CAACa,OAAO;AACxE,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}