{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RipSar\\\\WebstormProjects\\\\todo\\\\src\\\\components\\\\InputToDo\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport './styles.scss';\n\n// @ts-ignore\n\n//\n\nimport { TODO_TEMPLATE } from './constants';\nimport { addItem } from \"../../slices/counterSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InputToDo(_ref) {\n  _s();\n  let {\n    name\n  } = _ref;\n  const dispatch = useDispatch();\n  const [inputValue, setInputValue] = useState(\"\");\n  const handleInput = e => {\n    if (e.key === 'Enter') {\n      if (inputValue.trim() !== '') {\n        const uniqueID = 'id' + Math.random().toString(16).slice(2);\n        const newTodo = {\n          ...TODO_TEMPLATE,\n          value: inputValue,\n          id: uniqueID,\n          isCompleted: false,\n          isEditing: false\n        };\n        dispatch(addItem(newTodo));\n        setInputValue('');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"items\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"items-toggle-all\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\u203A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"items-input\",\n      placeholder: name,\n      onKeyDown: handleInput,\n      value: inputValue,\n      onChange: e => {\n        setInputValue(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(InputToDo, \"x8ZDuDKeROdcWbf5k67/BcboJkc=\", false, function () {\n  return [useDispatch];\n});\n_c = InputToDo;\nexport default InputToDo;\nvar _c;\n$RefreshReg$(_c, \"InputToDo\");","map":{"version":3,"names":["React","useState","useDispatch","TODO_TEMPLATE","addItem","jsxDEV","_jsxDEV","InputToDo","_ref","_s","name","dispatch","inputValue","setInputValue","handleInput","e","key","trim","uniqueID","Math","random","toString","slice","newTodo","value","id","isCompleted","isEditing","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onKeyDown","onChange","target","_c","$RefreshReg$"],"sources":["C:/Users/RipSar/WebstormProjects/todo/src/components/InputToDo/index.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport './styles.scss'\r\n\r\n// @ts-ignore\r\n\r\n//\r\n\r\n\r\nimport { TODO_TEMPLATE } from './constants'\r\nimport {addItem} from \"../../slices/counterSlice\";\r\n\r\ninterface ToDoInputName {\r\n    name: string;\r\n}\r\nfunction InputToDo ({name}: ToDoInputName ) {\r\n    const dispatch = useDispatch();\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n\r\n    const handleInput = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            if (inputValue.trim() !== '') {\r\n                const uniqueID = 'id' + Math.random().toString(16).slice(2);\r\n                const newTodo = {\r\n                    ...TODO_TEMPLATE,\r\n                    value: inputValue,\r\n                    id: uniqueID,\r\n                    isCompleted: false,\r\n                    isEditing: false,\r\n                };\r\n                dispatch(addItem(newTodo))\r\n                setInputValue('')\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='items'>\r\n            <button className='items-toggle-all'>\r\n                <span>\r\n                    â€º\r\n                </span>\r\n            </button>\r\n            <input type='text'\r\n                   className='items-input'\r\n                   placeholder={name}\r\n                   onKeyDown={handleInput}\r\n                   value={inputValue}\r\n                   onChange={(e: React.ChangeEvent<HTMLInputElement>) => {setInputValue(e.target.value)}}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default InputToDo;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAO,eAAe;;AAEtB;;AAEA;;AAGA,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAAQC,OAAO,QAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAKlD,SAASC,SAASA,CAAAC,IAAA,EAA0B;EAAAC,EAAA;EAAA,IAAxB;IAACC;EAAmB,CAAC,GAAAF,IAAA;EACrC,MAAMG,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMa,WAAW,GAAIC,CAAsC,IAAK;IAC5D,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,EAAE;MACnB,IAAIJ,UAAU,CAACK,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAC1B,MAAMC,QAAQ,GAAG,IAAI,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;QAC3D,MAAMC,OAAO,GAAG;UACZ,GAAGpB,aAAa;UAChBqB,KAAK,EAAEZ,UAAU;UACjBa,EAAE,EAAEP,QAAQ;UACZQ,WAAW,EAAE,KAAK;UAClBC,SAAS,EAAE;QACf,CAAC;QACDhB,QAAQ,CAACP,OAAO,CAACmB,OAAO,CAAC,CAAC;QAC1BV,aAAa,CAAC,EAAE,CAAC;MACrB;IACJ;EACJ,CAAC;EAED,oBACIP,OAAA;IAAKsB,SAAS,EAAC,OAAO;IAAAC,QAAA,gBAClBvB,OAAA;MAAQsB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAChCvB,OAAA;QAAAuB,QAAA,EAAM;MAEN;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACT3B,OAAA;MAAO4B,IAAI,EAAC,MAAM;MACXN,SAAS,EAAC,aAAa;MACvBO,WAAW,EAAEzB,IAAK;MAClB0B,SAAS,EAAEtB,WAAY;MACvBU,KAAK,EAAEZ,UAAW;MAClByB,QAAQ,EAAGtB,CAAsC,IAAK;QAACF,aAAa,CAACE,CAAC,CAACuB,MAAM,CAACd,KAAK,CAAC;MAAA;IAAE;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5F,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACxB,EAAA,CArCQF,SAAS;EAAA,QACGL,WAAW;AAAA;AAAAqC,EAAA,GADvBhC,SAAS;AAsClB,eAAeA,SAAS;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}